<% var item, key %><%
htmlWebpackPlugin.options.appMountIds = htmlWebpackPlugin.options.appMountIds || [] %><%
htmlWebpackPlugin.options.lang = htmlWebpackPlugin.options.lang || "en" %><%
htmlWebpackPlugin.options.links = htmlWebpackPlugin.options.links || [] %><%
htmlWebpackPlugin.options.meta = htmlWebpackPlugin.options.meta || [] %><%
htmlWebpackPlugin.options.scripts = htmlWebpackPlugin.options.scripts || []
%><!DOCTYPE html>
<html lang="<%= htmlWebpackPlugin.options.lang %>"<% if (htmlWebpackPlugin.files.manifest) { %> manifest="<%= htmlWebpackPlugin.files.manifest %>"<% } %>>
  <head>
  </head>  
  <body><%
    if (htmlWebpackPlugin.options.unsupportedBrowser) { %>
    <style>.unsupported-browser { display: none; }</style>
    <div class="unsupported-browser">
      Sorry, your browser is not supported. Please upgrade to the latest version or switch your browser to use this
      site. See <a href="http://outdatedbrowser.com/">outdatedbrowser.com</a> for options.
    </div><%
    } %><%

    if (htmlWebpackPlugin.options.bodyHtmlSnippet) { %>
    <%= htmlWebpackPlugin.options.bodyHtmlSnippet %><%
    } %><%

    for (item of htmlWebpackPlugin.options.appMountIds) { %>
    <div id="<%= item %>"></div><%
    } %><%

    if (htmlWebpackPlugin.options.window) { %>
    <script type="text/javascript"><%
      for (key in htmlWebpackPlugin.options.window) { %>
      window['<%= key %>'] = <%= JSON.stringify(htmlWebpackPlugin.options.window[key]) %>;<%
      } %>
    </script><%
    } %><%

    if (htmlWebpackPlugin.options.inlineManifestWebpackName) { %>
    <%= htmlWebpackPlugin.files[htmlWebpackPlugin.options.inlineManifestWebpackName] %><%
    } %><%

    for (item of htmlWebpackPlugin.options.scripts) { %><%
      if (typeof item === 'string' || item instanceof String) { item = { src: item, type: 'text/javascript' } } %>
    <script<% for (key in item) { %> <%= key %>="<%= item[key] %>"<% } %>></script><%
    } %><%

    for (key in htmlWebpackPlugin.files.chunks) { %><%
      if (htmlWebpackPlugin.files.jsIntegrity) { %>
    <script
      src="<%= htmlWebpackPlugin.files.chunks[key].entry %>"
      type="text/javascript"
      integrity="<%= htmlWebpackPlugin.files.jsIntegrity[htmlWebpackPlugin.files.js.indexOf(htmlWebpackPlugin.files.chunks[key].entry)] %>"
      crossorigin="<%= webpackConfig.output.crossOriginLoading %>"></script><%
      } else { %>
    <script src="<%= htmlWebpackPlugin.files.chunks[key].entry %>" type="text/javascript"></script><%
      } %><%
    } %>

    <% if (htmlWebpackPlugin.options.devServer) { %>
      <script src="<%= htmlWebpackPlugin.options.devServer %>/webpack-dev-server.js" type="text/javascript"></script>
    <% } %>

    <div id="root">
        <div class="loader" />
    </div>
  </body>
  <script>
     function loadScript(src, cb) {
            //创建一个script元素
            var el = document.createElement('script');
            var loaded = false;
            //设置加载完成的回调事件
            el.onload = el.onreadystatechange = function () {
                //防止重复加载
                if ((el.readyState && el.readyState !== 'complete' && el.readyState !== 'loaded') || loaded) {
                    return false;
                }
                //加载完成后将该脚本的onload设置为null
                el.onload = el.onreadystatechange = null;
                loaded = true;
                cb && cb();
            };
            el.async = true;
            el.src = src;
            var body = document.getElementsByTagName('body')[0];
            body.appendChild(el);
        }
        window.onload = function () {
            var scripts = [];
            [].forEach.call(document.getElementsByClassName('async_script'), function (a) {
                scripts.push(a.getAttribute('href'));
            });
            for (var i = 0; i < scripts.length; i++) {
                (function (j) {
                    setTimeout(function () {
                        loadScript(scripts[j]);
                    }, j * 500);
                }(i));
            }
        }
  </script>
  
</html>
